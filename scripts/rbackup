#!/usr/bin/env python2

import argparse
import logging
import os
import sys

sys.path.append('.')

from rbackup.config         import Configuration
from rbackup.filesystems    import Filesystems
from rbackup.lvm            import LVM
from rbackup.duplicity      import Duplicity
from rbackup.networking     import Networking

__description__ = 'Duplicity wrapper'

_d_debug = False
_d_setup = False
_d_use_snapshots = 'auto'
_d_volumegroup = 'vg00'
_d_snapshot_size = 1
_d_cleanup_snapshots = False

ll2str = {
    10: 'DEBUG',
    20: 'INFO',
    30: 'WARNING',
    40: 'ERROR',
    50: 'CRITICAL'
}

def main():
    parser = argparse.ArgumentParser(description=__description__)
    parser.add_argument('-D', dest='debug', action='store_true',
        default=_d_debug, help='Enable debugging')

    parser.add_argument('-s', metavar='OPTION', dest='use_snapshots',
        action='store', default=_d_use_snapshots,
        help='Enable snapshotted backups (auto/yes/no) [{0}]'.format(
            _d_use_snapshots))

    parser.add_argument('-V', metavar='VGNAME', dest='volumegroup',
        action='store', default=_d_volumegroup,
        help='Volume group for snapshots [{0}]'.format(_d_volumegroup))

    parser.add_argument('--ssize', metavar='SIZE', dest='snap_size',
        action='store', type=int, default=_d_snapshot_size,
        help='Size of a snapshot in GB [{0}]'.format(_d_snapshot_size))

    parser.add_argument('--setup', dest='setup', action='store_true',
        default=_d_setup, help='Setup SSH configuration')

    parser.add_argument('--scleanup', dest='cleanup_snapshots',
        action='store_true', default=_d_cleanup_snapshots,
        help='Cleanup all leftover snapshots')

    args = parser.parse_args()

    logger = logging.getLogger('main')
    if args.debug:
        log_level = logging.DEBUG
    else:
        log_level = logging.INFO
    logger.setLevel(log_level)

    console_logger = logging.StreamHandler()
    console_logger.setLevel(log_level)
    formatter = logging.Formatter('%(asctime)s [%(levelname)s]: %(message)s')
    console_logger.setFormatter(formatter)
    logger.addHandler(console_logger)

    logger.debug('logging at %s' % ll2str[log_level])

    if os.geteuid() is not 0:
        logger.error('this application requires root rights')
        return 1

    config = Configuration(logger)
    if args.setup:
        try:
            host = raw_input('Enter remote host: ')
            user = raw_input('Enter remote user: ')
            path = raw_input('Enter remote path: ')
        except KeyboardInterrupt:
            logger.error('setup aborted')
            return 1

        config.create_config(host, user, path)
        return

    config.update()

    networking = Networking(logger, config)
    if not networking.on_runon_network():
        logger.error('not on a trusted network, not running backup')
        return 1

    remote_transports = networking.server_is_alive()
    if not remote_transports['ipv4'] and not remote_transports['ipv6']:
        logger.error('{0} is unreachable'.format(config['remote_host']))
        return 1

    filesystems = Filesystems(logger)
    lvm = LVM(logger, filesystems, args.use_snapshots, args.snap_size)
    duplicity = Duplicity(logger, config)

    if args.cleanup_snapshots:
        lvm.cleanup_snapshots()
        return
    elif args.use_snapshots in ['yes', 'auto']:
        snapshot_timestamp = lvm.create_snapshots()
        os.chdir('/.snapshot')
    else:
        os.chdir('/')

    duplicity.backup('.')

    if args.use_snapshots in ['yes', 'auto']:
        os.chdir('/')
        lvm.cleanup_snapshots()

    return

if __name__ == '__main__':
    sys.exit(main())
