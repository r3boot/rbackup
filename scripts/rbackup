#!/usr/bin/env python2

import argparse
import datetime
import logging
import os
import sys
import time

sys.path.append('.')

from rbackup.config         import Configuration
from rbackup.output         import Output
from rbackup.filesystems    import Filesystems
from rbackup.lvm            import LVM
from rbackup.duplicity      import Duplicity
from rbackup.networking     import Networking
from rbackup.pkgmgr         import PackageManager

__description__ = 'Duplicity wrapper'

_d_debug = False
_d_setup = False
_d_use_snapshots = 'auto'
_d_snapshot_size = 1
_d_cleanup_snapshots = False

ll2str = {
    10: 'DEBUG',
    20: 'INFO',
    30: 'WARNING',
    40: 'ERROR',
    50: 'CRITICAL'
}

MAX_PKGMGR_WAIT=300

def main():
    parser = argparse.ArgumentParser(description=__description__)
    parser.add_argument('-D', dest='debug', action='store_true',
        default=_d_debug, help='Enable debugging')

    parser.add_argument('--setup', dest='setup', action='store_true',
        default=_d_setup, help='Setup SSH configuration')

    parser.add_argument('--cleanup', dest='cleanup_snapshots',
        action='store_true', default=_d_cleanup_snapshots,
        help='Cleanup all leftover snapshots')

    args = parser.parse_args()

    if args.debug:
        log_level = logging.DEBUG
    else:
        log_level = logging.INFO

    output = Output(log_level)

    output.debug('logging at %s' % ll2str[log_level])

    if os.geteuid() is not 0:
        output.error('this application requires root rights')
        return 1

    config = Configuration(output)
    if args.setup:
        try:
            host = raw_input('Enter remote host: ')
            user = raw_input('Enter remote user: ')
            path = raw_input('Enter remote path: ')
        except KeyboardInterrupt:
            output.error('setup aborted')
            return 1

        config.create_config(host, user, path)
        return

    config.update()

    networking = Networking(output, config)
    if not networking.on_runon_network():
        output.critical('Not running backup', 'not on a trusted network')
        return 1

    remote_transports = networking.server_is_alive()
    if not remote_transports['ipv4'] and not remote_transports['ipv6']:
        output.critical('Not running backup', '{0} is unreachable'.format(
            config['remote_host']))
        return 1

    pkgmgr = PackageManager(output)
    t = 0
    while pkgmgr.has_running_pkgmgr():
        if t >= MAX_PKGMGR_WAIT:
            output.critical('Not running backup', 'waited {0} seconds for' \
                    + ' package manager, aborting'.format(t))
            return 1

        t += 1
        output.debug('waiting for package manager')
        time.sleep(1.0)

    filesystems = Filesystems(output)
    lvm = LVM(output, filesystems, config['use_snapshots'],
            config['snapshot_size'])

    duplicity = Duplicity(output, config)

    os.chdir('/')

    if args.cleanup_snapshots:
        lvm.cleanup_snapshots()
        return
    elif config['use_snapshots'] in ['yes', 'auto']:
        lvm.cleanup_snapshots()
        lvm.create_snapshots()
        os.chdir('/.snapshot')

    duplicity.backup('/var/empty')

    if args.use_snapshots in ['yes', 'auto']:
        os.chdir('/')
        lvm.cleanup_snapshots()

    return

if __name__ == '__main__':
    sys.exit(main())
